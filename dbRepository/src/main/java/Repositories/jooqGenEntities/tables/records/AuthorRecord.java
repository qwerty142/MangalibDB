/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables.records;


import Repositories.jooqGenEntities.tables.Author;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.author.author_id</code>.
     */
    public void setAuthorId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.author.author_id</code>.
     */
    @Nullable
    public Long getAuthorId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.author.author_name</code>.
     */
    public void setAuthorName(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.author.author_name</code>.
     */
    @Nullable
    public String getAuthorName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Author.AUTHOR.AUTHOR_ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Author.AUTHOR.AUTHOR_NAME;
    }

    @Override
    @Nullable
    public Long component1() {
        return getAuthorId();
    }

    @Override
    @Nullable
    public String component2() {
        return getAuthorName();
    }

    @Override
    @Nullable
    public Long value1() {
        return getAuthorId();
    }

    @Override
    @Nullable
    public String value2() {
        return getAuthorName();
    }

    @Override
    @NotNull
    public AuthorRecord value1(@Nullable Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    @NotNull
    public AuthorRecord value2(@Nullable String value) {
        setAuthorName(value);
        return this;
    }

    @Override
    @NotNull
    public AuthorRecord values(@Nullable Long value1, @Nullable String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    @ConstructorProperties({ "authorId", "authorName" })
    public AuthorRecord(@Nullable Long authorId, @Nullable String authorName) {
        super(Author.AUTHOR);

        setAuthorId(authorId);
        setAuthorName(authorName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Repositories.jooqGenEntities.tables.pojos.Author value) {
        super(Author.AUTHOR);

        if (value != null) {
            setAuthorId(value.getAuthorId());
            setAuthorName(value.getAuthorName());
            resetChangedOnNotNull();
        }
    }
}
