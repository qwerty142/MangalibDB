/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables.records;


import Repositories.jooqGenEntities.tables.Commentary;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentaryRecord extends UpdatableRecordImpl<CommentaryRecord> implements Record4<Long, String, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.commentary.commentary_id</code>.
     */
    public void setCommentaryId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.commentary.commentary_id</code>.
     */
    @Nullable
    public Long getCommentaryId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.commentary.commentary</code>.
     */
    public void setCommentary(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.commentary.commentary</code>.
     */
    @Size(max = 255)
    @Nullable
    public String getCommentary() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.commentary.manga_id</code>.
     */
    public void setMangaId(@Nullable Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.commentary.manga_id</code>.
     */
    @Nullable
    public Long getMangaId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.commentary.user_id</code>.
     */
    public void setUserId(@Nullable Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.commentary.user_id</code>.
     */
    @Nullable
    public Long getUserId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Long, String, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<Long, String, Long, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Commentary.COMMENTARY.COMMENTARY_ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Commentary.COMMENTARY.COMMENTARY_;
    }

    @Override
    @NotNull
    public Field<Long> field3() {
        return Commentary.COMMENTARY.MANGA_ID;
    }

    @Override
    @NotNull
    public Field<Long> field4() {
        return Commentary.COMMENTARY.USER_ID;
    }

    @Override
    @Nullable
    public Long component1() {
        return getCommentaryId();
    }

    @Override
    @Nullable
    public String component2() {
        return getCommentary();
    }

    @Override
    @Nullable
    public Long component3() {
        return getMangaId();
    }

    @Override
    @Nullable
    public Long component4() {
        return getUserId();
    }

    @Override
    @Nullable
    public Long value1() {
        return getCommentaryId();
    }

    @Override
    @Nullable
    public String value2() {
        return getCommentary();
    }

    @Override
    @Nullable
    public Long value3() {
        return getMangaId();
    }

    @Override
    @Nullable
    public Long value4() {
        return getUserId();
    }

    @Override
    @NotNull
    public CommentaryRecord value1(@Nullable Long value) {
        setCommentaryId(value);
        return this;
    }

    @Override
    @NotNull
    public CommentaryRecord value2(@Nullable String value) {
        setCommentary(value);
        return this;
    }

    @Override
    @NotNull
    public CommentaryRecord value3(@Nullable Long value) {
        setMangaId(value);
        return this;
    }

    @Override
    @NotNull
    public CommentaryRecord value4(@Nullable Long value) {
        setUserId(value);
        return this;
    }

    @Override
    @NotNull
    public CommentaryRecord values(@Nullable Long value1, @Nullable String value2, @Nullable Long value3, @Nullable Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentaryRecord
     */
    public CommentaryRecord() {
        super(Commentary.COMMENTARY);
    }

    /**
     * Create a detached, initialised CommentaryRecord
     */
    @ConstructorProperties({ "commentaryId", "commentary", "mangaId", "userId" })
    public CommentaryRecord(@Nullable Long commentaryId, @Nullable String commentary, @Nullable Long mangaId, @Nullable Long userId) {
        super(Commentary.COMMENTARY);

        setCommentaryId(commentaryId);
        setCommentary(commentary);
        setMangaId(mangaId);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CommentaryRecord
     */
    public CommentaryRecord(Repositories.jooqGenEntities.tables.pojos.Commentary value) {
        super(Commentary.COMMENTARY);

        if (value != null) {
            setCommentaryId(value.getCommentaryId());
            setCommentary(value.getCommentary());
            setMangaId(value.getMangaId());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
