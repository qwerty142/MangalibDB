/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables.records;


import Repositories.jooqGenEntities.tables.ToRead;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ToReadRecord extends UpdatableRecordImpl<ToReadRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.to_read.manga_id</code>.
     */
    public void setMangaId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.to_read.manga_id</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getMangaId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.to_read.user_id</code>.
     */
    public void setUserId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.to_read.user_id</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getUserId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return ToRead.TO_READ.MANGA_ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return ToRead.TO_READ.USER_ID;
    }

    @Override
    @NotNull
    public Long component1() {
        return getMangaId();
    }

    @Override
    @NotNull
    public Long component2() {
        return getUserId();
    }

    @Override
    @NotNull
    public Long value1() {
        return getMangaId();
    }

    @Override
    @NotNull
    public Long value2() {
        return getUserId();
    }

    @Override
    @NotNull
    public ToReadRecord value1(@NotNull Long value) {
        setMangaId(value);
        return this;
    }

    @Override
    @NotNull
    public ToReadRecord value2(@NotNull Long value) {
        setUserId(value);
        return this;
    }

    @Override
    @NotNull
    public ToReadRecord values(@NotNull Long value1, @NotNull Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ToReadRecord
     */
    public ToReadRecord() {
        super(ToRead.TO_READ);
    }

    /**
     * Create a detached, initialised ToReadRecord
     */
    @ConstructorProperties({ "mangaId", "userId" })
    public ToReadRecord(@NotNull Long mangaId, @NotNull Long userId) {
        super(ToRead.TO_READ);

        setMangaId(mangaId);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ToReadRecord
     */
    public ToReadRecord(Repositories.jooqGenEntities.tables.pojos.ToRead value) {
        super(ToRead.TO_READ);

        if (value != null) {
            setMangaId(value.getMangaId());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
