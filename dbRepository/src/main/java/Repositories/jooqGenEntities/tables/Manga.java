/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables;


import Repositories.jooqGenEntities.Keys;
import Repositories.jooqGenEntities.Public;
import Repositories.jooqGenEntities.tables.records.MangaRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Manga extends TableImpl<MangaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.manga</code>
     */
    public static final Manga MANGA = new Manga();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<MangaRecord> getRecordType() {
        return MangaRecord.class;
    }

    /**
     * The column <code>public.manga.manga_id</code>.
     */
    public final TableField<MangaRecord, Long> MANGA_ID = createField(DSL.name("manga_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.manga.middle_review</code>.
     */
    public final TableField<MangaRecord, BigDecimal> MIDDLE_REVIEW = createField(DSL.name("middle_review"), SQLDataType.NUMERIC(10, 3), this, "");

    /**
     * The column <code>public.manga.author_id</code>.
     */
    public final TableField<MangaRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.manga.translator_id</code>.
     */
    public final TableField<MangaRecord, Long> TRANSLATOR_ID = createField(DSL.name("translator_id"), SQLDataType.BIGINT, this, "");

    private Manga(Name alias, Table<MangaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Manga(Name alias, Table<MangaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.manga</code> table reference
     */
    public Manga(String alias) {
        this(DSL.name(alias), MANGA);
    }

    /**
     * Create an aliased <code>public.manga</code> table reference
     */
    public Manga(Name alias) {
        this(alias, MANGA);
    }

    /**
     * Create a <code>public.manga</code> table reference
     */
    public Manga() {
        this(DSL.name("manga"), null);
    }

    public <O extends Record> Manga(Table<O> child, ForeignKey<O, MangaRecord> key) {
        super(child, key, MANGA);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<MangaRecord, Long> getIdentity() {
        return (Identity<MangaRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<MangaRecord> getPrimaryKey() {
        return Keys.MANGA_PKEY;
    }

    @Override
    @NotNull
    public List<ForeignKey<MangaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MANGA__MANGA_AUTHOR_ID_FKEY, Keys.MANGA__MANGA_TRANSLATOR_ID_FKEY);
    }

    private transient Author _author;
    private transient Translator _translator;

    /**
     * Get the implicit join path to the <code>public.author</code> table.
     */
    public Author author() {
        if (_author == null)
            _author = new Author(this, Keys.MANGA__MANGA_AUTHOR_ID_FKEY);

        return _author;
    }

    /**
     * Get the implicit join path to the <code>public.translator</code> table.
     */
    public Translator translator() {
        if (_translator == null)
            _translator = new Translator(this, Keys.MANGA__MANGA_TRANSLATOR_ID_FKEY);

        return _translator;
    }

    @Override
    @NotNull
    public Manga as(String alias) {
        return new Manga(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Manga as(Name alias) {
        return new Manga(alias, this);
    }

    @Override
    @NotNull
    public Manga as(Table<?> alias) {
        return new Manga(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Manga rename(String name) {
        return new Manga(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Manga rename(Name name) {
        return new Manga(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Manga rename(Table<?> name) {
        return new Manga(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Long, BigDecimal, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super BigDecimal, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super BigDecimal, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
