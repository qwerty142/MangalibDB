/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables;


import Repositories.jooqGenEntities.Keys;
import Repositories.jooqGenEntities.Public;
import Repositories.jooqGenEntities.tables.records.ReviewsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reviews extends TableImpl<ReviewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reviews</code>
     */
    public static final Reviews REVIEWS = new Reviews();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ReviewsRecord> getRecordType() {
        return ReviewsRecord.class;
    }

    /**
     * The column <code>public.reviews.manga_id</code>.
     */
    public final TableField<ReviewsRecord, Long> MANGA_ID = createField(DSL.name("manga_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.reviews.user_id</code>.
     */
    public final TableField<ReviewsRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.reviews.review_rate</code>.
     */
    public final TableField<ReviewsRecord, Integer> REVIEW_RATE = createField(DSL.name("review_rate"), SQLDataType.INTEGER, this, "");

    private Reviews(Name alias, Table<ReviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reviews(Name alias, Table<ReviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reviews</code> table reference
     */
    public Reviews(String alias) {
        this(DSL.name(alias), REVIEWS);
    }

    /**
     * Create an aliased <code>public.reviews</code> table reference
     */
    public Reviews(Name alias) {
        this(alias, REVIEWS);
    }

    /**
     * Create a <code>public.reviews</code> table reference
     */
    public Reviews() {
        this(DSL.name("reviews"), null);
    }

    public <O extends Record> Reviews(Table<O> child, ForeignKey<O, ReviewsRecord> key) {
        super(child, key, REVIEWS);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public UniqueKey<ReviewsRecord> getPrimaryKey() {
        return Keys.REVIEWS_PKEY;
    }

    @Override
    @NotNull
    public List<ForeignKey<ReviewsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVIEWS__REVIEWS_MANGA_ID_FKEY, Keys.REVIEWS__REVIEWS_USER_ID_FKEY);
    }

    private transient Manga _manga;
    private transient Mangareader _mangareader;

    /**
     * Get the implicit join path to the <code>public.manga</code> table.
     */
    public Manga manga() {
        if (_manga == null)
            _manga = new Manga(this, Keys.REVIEWS__REVIEWS_MANGA_ID_FKEY);

        return _manga;
    }

    /**
     * Get the implicit join path to the <code>public.mangareader</code> table.
     */
    public Mangareader mangareader() {
        if (_mangareader == null)
            _mangareader = new Mangareader(this, Keys.REVIEWS__REVIEWS_USER_ID_FKEY);

        return _mangareader;
    }

    @Override
    @NotNull
    public Reviews as(String alias) {
        return new Reviews(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Reviews as(Name alias) {
        return new Reviews(alias, this);
    }

    @Override
    @NotNull
    public Reviews as(Table<?> alias) {
        return new Reviews(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Reviews rename(String name) {
        return new Reviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Reviews rename(Name name) {
        return new Reviews(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Reviews rename(Table<?> name) {
        return new Reviews(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
