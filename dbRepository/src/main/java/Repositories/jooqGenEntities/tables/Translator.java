/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables;


import Repositories.jooqGenEntities.Keys;
import Repositories.jooqGenEntities.Public;
import Repositories.jooqGenEntities.tables.records.TranslatorRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Translator extends TableImpl<TranslatorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.translator</code>
     */
    public static final Translator TRANSLATOR = new Translator();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<TranslatorRecord> getRecordType() {
        return TranslatorRecord.class;
    }

    /**
     * The column <code>public.translator.translator_id</code>.
     */
    public final TableField<TranslatorRecord, Long> TRANSLATOR_ID = createField(DSL.name("translator_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.translator.translator_name</code>.
     */
    public final TableField<TranslatorRecord, String> TRANSLATOR_NAME = createField(DSL.name("translator_name"), SQLDataType.CLOB, this, "");

    private Translator(Name alias, Table<TranslatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Translator(Name alias, Table<TranslatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.translator</code> table reference
     */
    public Translator(String alias) {
        this(DSL.name(alias), TRANSLATOR);
    }

    /**
     * Create an aliased <code>public.translator</code> table reference
     */
    public Translator(Name alias) {
        this(alias, TRANSLATOR);
    }

    /**
     * Create a <code>public.translator</code> table reference
     */
    public Translator() {
        this(DSL.name("translator"), null);
    }

    public <O extends Record> Translator(Table<O> child, ForeignKey<O, TranslatorRecord> key) {
        super(child, key, TRANSLATOR);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<TranslatorRecord, Long> getIdentity() {
        return (Identity<TranslatorRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<TranslatorRecord> getPrimaryKey() {
        return Keys.TRANSLATOR_PKEY;
    }

    @Override
    @NotNull
    public Translator as(String alias) {
        return new Translator(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Translator as(Name alias) {
        return new Translator(alias, this);
    }

    @Override
    @NotNull
    public Translator as(Table<?> alias) {
        return new Translator(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Translator rename(String name) {
        return new Translator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Translator rename(Name name) {
        return new Translator(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Translator rename(Table<?> name) {
        return new Translator(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
