/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities.tables;


import Repositories.jooqGenEntities.Keys;
import Repositories.jooqGenEntities.Public;
import Repositories.jooqGenEntities.tables.records.PageRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Page extends TableImpl<PageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.page</code>
     */
    public static final Page PAGE = new Page();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<PageRecord> getRecordType() {
        return PageRecord.class;
    }

    /**
     * The column <code>public.page.chapter_id</code>.
     */
    public final TableField<PageRecord, Long> CHAPTER_ID = createField(DSL.name("chapter_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.page.page_place</code>.
     */
    public final TableField<PageRecord, Long> PAGE_PLACE = createField(DSL.name("page_place"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.page.init_picture_link</code>.
     */
    public final TableField<PageRecord, String> INIT_PICTURE_LINK = createField(DSL.name("init_picture_link"), SQLDataType.VARCHAR(255), this, "");

    private Page(Name alias, Table<PageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Page(Name alias, Table<PageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.page</code> table reference
     */
    public Page(String alias) {
        this(DSL.name(alias), PAGE);
    }

    /**
     * Create an aliased <code>public.page</code> table reference
     */
    public Page(Name alias) {
        this(alias, PAGE);
    }

    /**
     * Create a <code>public.page</code> table reference
     */
    public Page() {
        this(DSL.name("page"), null);
    }

    public <O extends Record> Page(Table<O> child, ForeignKey<O, PageRecord> key) {
        super(child, key, PAGE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public UniqueKey<PageRecord> getPrimaryKey() {
        return Keys.PAGE_PKEY;
    }

    @Override
    @NotNull
    public List<ForeignKey<PageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAGE__PAGE_CHAPTER_ID_FKEY);
    }

    private transient Chapter _chapter;

    /**
     * Get the implicit join path to the <code>public.chapter</code> table.
     */
    public Chapter chapter() {
        if (_chapter == null)
            _chapter = new Chapter(this, Keys.PAGE__PAGE_CHAPTER_ID_FKEY);

        return _chapter;
    }

    @Override
    @NotNull
    public Page as(String alias) {
        return new Page(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Page as(Name alias) {
        return new Page(alias, this);
    }

    @Override
    @NotNull
    public Page as(Table<?> alias) {
        return new Page(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Page rename(String name) {
        return new Page(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Page rename(Name name) {
        return new Page(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Page rename(Table<?> name) {
        return new Page(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
