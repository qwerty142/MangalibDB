/*
 * This file is generated by jOOQ.
 */
package Repositories.jooqGenEntities;


import Repositories.jooqGenEntities.tables.Author;
import Repositories.jooqGenEntities.tables.Ban;
import Repositories.jooqGenEntities.tables.Chapter;
import Repositories.jooqGenEntities.tables.Commentary;
import Repositories.jooqGenEntities.tables.InCurrentReading;
import Repositories.jooqGenEntities.tables.Manga;
import Repositories.jooqGenEntities.tables.MangaTypeTag;
import Repositories.jooqGenEntities.tables.Mangareader;
import Repositories.jooqGenEntities.tables.Page;
import Repositories.jooqGenEntities.tables.Recommendation;
import Repositories.jooqGenEntities.tables.Reviews;
import Repositories.jooqGenEntities.tables.ToRead;
import Repositories.jooqGenEntities.tables.Translator;
import Repositories.jooqGenEntities.tables.records.AuthorRecord;
import Repositories.jooqGenEntities.tables.records.BanRecord;
import Repositories.jooqGenEntities.tables.records.ChapterRecord;
import Repositories.jooqGenEntities.tables.records.CommentaryRecord;
import Repositories.jooqGenEntities.tables.records.InCurrentReadingRecord;
import Repositories.jooqGenEntities.tables.records.MangaRecord;
import Repositories.jooqGenEntities.tables.records.MangaTypeTagRecord;
import Repositories.jooqGenEntities.tables.records.MangareaderRecord;
import Repositories.jooqGenEntities.tables.records.PageRecord;
import Repositories.jooqGenEntities.tables.records.RecommendationRecord;
import Repositories.jooqGenEntities.tables.records.ReviewsRecord;
import Repositories.jooqGenEntities.tables.records.ToReadRecord;
import Repositories.jooqGenEntities.tables.records.TranslatorRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("author_pkey"), new TableField[] { Author.AUTHOR.AUTHOR_ID }, true);
    public static final UniqueKey<BanRecord> BAN_PKEY = Internal.createUniqueKey(Ban.BAN, DSL.name("ban_pkey"), new TableField[] { Ban.BAN.BAN_ID }, true);
    public static final UniqueKey<ChapterRecord> CHAPTER_PKEY = Internal.createUniqueKey(Chapter.CHAPTER, DSL.name("chapter_pkey"), new TableField[] { Chapter.CHAPTER.CHAPTER_ID }, true);
    public static final UniqueKey<CommentaryRecord> COMMENTARY_PKEY = Internal.createUniqueKey(Commentary.COMMENTARY, DSL.name("commentary_pkey"), new TableField[] { Commentary.COMMENTARY.COMMENTARY_ID }, true);
    public static final UniqueKey<InCurrentReadingRecord> IN_CURRENT_READING_PKEY = Internal.createUniqueKey(InCurrentReading.IN_CURRENT_READING, DSL.name("in_current_reading_pkey"), new TableField[] { InCurrentReading.IN_CURRENT_READING.MANGA_ID, InCurrentReading.IN_CURRENT_READING.USER_ID }, true);
    public static final UniqueKey<MangaRecord> MANGA_PKEY = Internal.createUniqueKey(Manga.MANGA, DSL.name("manga_pkey"), new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final UniqueKey<MangaTypeTagRecord> MANGA_TYPE_TAG_PKEY = Internal.createUniqueKey(MangaTypeTag.MANGA_TYPE_TAG, DSL.name("manga_type_tag_pkey"), new TableField[] { MangaTypeTag.MANGA_TYPE_TAG.MANGA_ID }, true);
    public static final UniqueKey<MangareaderRecord> MANGAREADER_PKEY = Internal.createUniqueKey(Mangareader.MANGAREADER, DSL.name("mangareader_pkey"), new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
    public static final UniqueKey<PageRecord> PAGE_PKEY = Internal.createUniqueKey(Page.PAGE, DSL.name("page_pkey"), new TableField[] { Page.PAGE.CHAPTER_ID, Page.PAGE.PAGE_PLACE }, true);
    public static final UniqueKey<RecommendationRecord> RECOMMENDATION_PKEY = Internal.createUniqueKey(Recommendation.RECOMMENDATION, DSL.name("recommendation_pkey"), new TableField[] { Recommendation.RECOMMENDATION.RECOMMENDATE_ID }, true);
    public static final UniqueKey<ReviewsRecord> REVIEWS_PKEY = Internal.createUniqueKey(Reviews.REVIEWS, DSL.name("reviews_pkey"), new TableField[] { Reviews.REVIEWS.MANGA_ID, Reviews.REVIEWS.USER_ID }, true);
    public static final UniqueKey<ToReadRecord> TO_READ_PKEY = Internal.createUniqueKey(ToRead.TO_READ, DSL.name("to_read_pkey"), new TableField[] { ToRead.TO_READ.MANGA_ID, ToRead.TO_READ.USER_ID }, true);
    public static final UniqueKey<TranslatorRecord> TRANSLATOR_PKEY = Internal.createUniqueKey(Translator.TRANSLATOR, DSL.name("translator_pkey"), new TableField[] { Translator.TRANSLATOR.TRANSLATOR_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BanRecord, MangareaderRecord> BAN__BAN_USER_ID_FKEY = Internal.createForeignKey(Ban.BAN, DSL.name("ban_user_id_fkey"), new TableField[] { Ban.BAN.USER_ID }, Keys.MANGAREADER_PKEY, new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
    public static final ForeignKey<ChapterRecord, MangaRecord> CHAPTER__CHAPTER_MANGA_ID_FKEY = Internal.createForeignKey(Chapter.CHAPTER, DSL.name("chapter_manga_id_fkey"), new TableField[] { Chapter.CHAPTER.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<CommentaryRecord, MangaRecord> COMMENTARY__COMMENTARY_MANGA_ID_FKEY = Internal.createForeignKey(Commentary.COMMENTARY, DSL.name("commentary_manga_id_fkey"), new TableField[] { Commentary.COMMENTARY.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<CommentaryRecord, MangareaderRecord> COMMENTARY__COMMENTARY_USER_ID_FKEY = Internal.createForeignKey(Commentary.COMMENTARY, DSL.name("commentary_user_id_fkey"), new TableField[] { Commentary.COMMENTARY.USER_ID }, Keys.MANGAREADER_PKEY, new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
    public static final ForeignKey<InCurrentReadingRecord, MangaRecord> IN_CURRENT_READING__IN_CURRENT_READING_MANGA_ID_FKEY = Internal.createForeignKey(InCurrentReading.IN_CURRENT_READING, DSL.name("in_current_reading_manga_id_fkey"), new TableField[] { InCurrentReading.IN_CURRENT_READING.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<InCurrentReadingRecord, MangareaderRecord> IN_CURRENT_READING__IN_CURRENT_READING_USER_ID_FKEY = Internal.createForeignKey(InCurrentReading.IN_CURRENT_READING, DSL.name("in_current_reading_user_id_fkey"), new TableField[] { InCurrentReading.IN_CURRENT_READING.USER_ID }, Keys.MANGAREADER_PKEY, new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
    public static final ForeignKey<MangaRecord, AuthorRecord> MANGA__MANGA_AUTHOR_ID_FKEY = Internal.createForeignKey(Manga.MANGA, DSL.name("manga_author_id_fkey"), new TableField[] { Manga.MANGA.AUTHOR_ID }, Keys.AUTHOR_PKEY, new TableField[] { Author.AUTHOR.AUTHOR_ID }, true);
    public static final ForeignKey<MangaRecord, TranslatorRecord> MANGA__MANGA_TRANSLATOR_ID_FKEY = Internal.createForeignKey(Manga.MANGA, DSL.name("manga_translator_id_fkey"), new TableField[] { Manga.MANGA.TRANSLATOR_ID }, Keys.TRANSLATOR_PKEY, new TableField[] { Translator.TRANSLATOR.TRANSLATOR_ID }, true);
    public static final ForeignKey<MangaTypeTagRecord, MangaRecord> MANGA_TYPE_TAG__MANGA_TYPE_TAG_MANGA_ID_FKEY = Internal.createForeignKey(MangaTypeTag.MANGA_TYPE_TAG, DSL.name("manga_type_tag_manga_id_fkey"), new TableField[] { MangaTypeTag.MANGA_TYPE_TAG.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<PageRecord, ChapterRecord> PAGE__PAGE_CHAPTER_ID_FKEY = Internal.createForeignKey(Page.PAGE, DSL.name("page_chapter_id_fkey"), new TableField[] { Page.PAGE.CHAPTER_ID }, Keys.CHAPTER_PKEY, new TableField[] { Chapter.CHAPTER.CHAPTER_ID }, true);
    public static final ForeignKey<RecommendationRecord, MangaRecord> RECOMMENDATION__RECOMMENDATION_MANGA_ID_FKEY = Internal.createForeignKey(Recommendation.RECOMMENDATION, DSL.name("recommendation_manga_id_fkey"), new TableField[] { Recommendation.RECOMMENDATION.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<RecommendationRecord, MangareaderRecord> RECOMMENDATION__RECOMMENDATION_USER_ID_FKEY = Internal.createForeignKey(Recommendation.RECOMMENDATION, DSL.name("recommendation_user_id_fkey"), new TableField[] { Recommendation.RECOMMENDATION.USER_ID }, Keys.MANGAREADER_PKEY, new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
    public static final ForeignKey<ReviewsRecord, MangaRecord> REVIEWS__REVIEWS_MANGA_ID_FKEY = Internal.createForeignKey(Reviews.REVIEWS, DSL.name("reviews_manga_id_fkey"), new TableField[] { Reviews.REVIEWS.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<ReviewsRecord, MangareaderRecord> REVIEWS__REVIEWS_USER_ID_FKEY = Internal.createForeignKey(Reviews.REVIEWS, DSL.name("reviews_user_id_fkey"), new TableField[] { Reviews.REVIEWS.USER_ID }, Keys.MANGAREADER_PKEY, new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
    public static final ForeignKey<ToReadRecord, MangaRecord> TO_READ__TO_READ_MANGA_ID_FKEY = Internal.createForeignKey(ToRead.TO_READ, DSL.name("to_read_manga_id_fkey"), new TableField[] { ToRead.TO_READ.MANGA_ID }, Keys.MANGA_PKEY, new TableField[] { Manga.MANGA.MANGA_ID }, true);
    public static final ForeignKey<ToReadRecord, MangareaderRecord> TO_READ__TO_READ_USER_ID_FKEY = Internal.createForeignKey(ToRead.TO_READ, DSL.name("to_read_user_id_fkey"), new TableField[] { ToRead.TO_READ.USER_ID }, Keys.MANGAREADER_PKEY, new TableField[] { Mangareader.MANGAREADER.USER_ID }, true);
}
