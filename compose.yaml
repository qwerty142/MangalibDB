services:
  etcd1: &etcd
    image: patroni
    networks: [ backend ]
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
      ETCD_UNSUPPORTED_ARCH: arm64
    container_name: demo-etcd1
    hostname: etcd1
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
    <<: *etcd
    container_name: demo-etcd2
    hostname: etcd2
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  etcd3:
    <<: *etcd
    container_name: demo-etcd3
    hostname: etcd3
    command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy:
    image: patroni
    networks: [ backend ]
    env_file: patroni/docker/patroni.env
    hostname: haproxy
    container_name: demo-haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: demo

  patroni1:
    image: patroni
    networks: [ backend ]
    env_file: patroni/docker/patroni.env
    hostname: patroni1
    container_name: demo-patroni1
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1

  patroni2:
    image: patroni
    networks: [ backend ]
    env_file: patroni/docker/patroni.env
    hostname: patroni2
    container_name: demo-patroni2
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2

  patroni3:
    image: patroni
    networks: [ backend ]
    env_file: patroni/docker/patroni.env
    hostname: patroni3
    container_name: demo-patroni3
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni3
  docker-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@host.docker.internal:5000/postgres?sslmode=disable"
    entrypoint: /bin/postgres_exporter --collector.stat_statements
  prometheus1:
    image: prom/prometheus:v2.51.0
    container_name: prometheus1
    ports:
      - "9090:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:

      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - backend

  grafana1:
    image: grafana/grafana-oss:10.4.1
    container_name: grafana1
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - backend
    depends_on:
      - prometheus1

networks:
  backend: { }
